#include "ae_tuning.h"

//const U8 g_centerMap[] = {
#define CENTERMAP {                                                                               \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \
}

//const U8 g_spotMap[] = {
#define SPOTMAP {               \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
    8, 8, 8, 8, 8, 8, 8, 8, 8,  \
}

//extern const ae_metering_config g_ae_metering_config = {
#define METERING_CONFIG {       \
    32,                         \
    32,                         \
    CENTERMAP,                  \
    9,                          \
    9,                          \
    SPOTMAP,                    \
}

//extern const ae_base_config g_ae_base_config = {
#define BASE_CONFIG {           \
    575,                        \
    625,                        \
    550,                        \
    650,                        \
    5,                          \
    5000,                       \
    16.f,                       \
    2.f,                        \
    220,                        \
    2000,                       \
    1.f,                        \
    12,                         \
}


//const ae_table g_convergent_table_ratio1[] = {
    //a = -0.182090, b = 1.659509, detla = 30, count = 20
#define CONVERGENT_TABLE_RATIO1  {  \
    {30, 1.300000f},                \
    {60, 1.246542f},                \
    {90, 1.211658f},                \
    {120, 1.185134f},               \
    {150, 1.163484f},               \
    {180, 1.145063f},               \
    {210, 1.128955f},               \
    {240, 1.114595f},               \
    {270, 1.101607f},               \
    {300, 1.089726f},               \
                                    \
    {330, 1.078760f},               \
    {360, 1.068566f},               \
    {390, 1.059029f},               \
    {420, 1.050063f},               \
    {450, 1.041595f},               \
    {480, 1.033568f},               \
    {510, 1.025932f},               \
    {540, 1.018648f},               \
    {575, 1.011680f},               \
    {600, 1.000000f},               \
}

//const ae_table g_convergent_table_ratio2[] = {
    //a = -0.000016, b = 0.997662, detla = 50, count = 88
#define CONVERGENT_TABLE_RATIO2  {  \
    {625, 1.000000f},               \
    {650, 0.995000f},               \
    {700, 0.991107f},               \
    {750, 0.986557f},               \
    {800, 0.981520f},               \
    {850, 0.976088f},               \
    {900, 0.970317f},               \
    {950, 0.964250f},               \
    {1000, 0.957916f},              \
    {1050, 0.951339f},              \
    {1100, 0.944539f},              \
                                    \
    {1150, 0.937532f},              \
    {1200, 0.930331f},              \
    {1250, 0.922947f},              \
    {1300, 0.915390f},              \
    {1350, 0.907670f},              \
    {1400, 0.899794f},              \
    {1450, 0.891769f},              \
    {1500, 0.883601f},              \
    {1550, 0.875295f},              \
    {1600, 0.866857f},              \
                                    \
    {1650, 0.858292f},              \
    {1700, 0.849603f},              \
    {1750, 0.840795f},              \
    {1800, 0.831872f},              \
    {1850, 0.822836f},              \
    {1900, 0.813691f},              \
    {1950, 0.804440f},              \
    {2000, 0.795085f},              \
    {2050, 0.785630f},              \
    {2100, 0.776076f},              \
                                    \
    {2150, 0.766426f},              \
    {2200, 0.756683f},              \
    {2250, 0.746847f},              \
    {2300, 0.736922f},              \
    {2350, 0.726909f},              \
    {2400, 0.716810f},              \
    {2450, 0.706626f},              \
    {2500, 0.696359f},              \
    {2550, 0.686011f},              \
    {2600, 0.675583f},              \
                                    \
    {2650, 0.665076f},              \
    {2700, 0.654492f},              \
    {2750, 0.643833f},              \
    {2800, 0.633098f},              \
    {2850, 0.622290f},              \
    {2900, 0.611410f},              \
    {2950, 0.600459f},              \
    {3000, 0.589438f},              \
    {3050, 0.578347f},              \
    {3100, 0.567189f},              \
                                    \
    {3150, 0.555963f},              \
    {3200, 0.544671f},              \
    {3250, 0.533314f},              \
    {3300, 0.521892f},              \
    {3350, 0.510407f},              \
    {3400, 0.498858f},              \
    {3450, 0.487248f},              \
    {3500, 0.475577f},              \
    {3550, 0.463844f},              \
    {3600, 0.452053f},              \
                                    \
    {3650, 0.440202f},              \
    {3700, 0.428292f},              \
    {3750, 0.416325f},              \
    {3800, 0.404301f},              \
    {3850, 0.392220f},              \
    {3900, 0.380083f},              \
    {3950, 0.367891f},              \
    {4000, 0.355645f},              \
    {4050, 0.343344f},              \
    {4100, 0.330989f},              \
                                    \
    {4150, 0.318582f},              \
    {4200, 0.306122f},              \
    {4250, 0.293610f},              \
    {4300, 0.281046f},              \
    {4350, 0.268431f},              \
    {4400, 0.255766f},              \
    {4450, 0.243051f},              \
    {4500, 0.230286f},              \
    {4550, 0.217472f},              \
    {4600, 0.204609f},              \
                                    \
    {4650, 0.191698f},              \
    {4700, 0.178738f},              \
    {4750, 0.165732f},              \
    {4800, 0.152678f},              \
    {4850, 0.139578f},              \
    {4900, 0.126431f},              \
    {4950, 0.113238f},              \
    {5000, 0.100000f},              \
}

#define FLICKER_FUNCTION(a, b) (a), (b), ((a)*(b))
//OVER_EXPOSURE.
//const float g_convergent_table_50Hz1[] = {
//    FLICKER_FUNCTION(70000.f, 18), // means the max 21.x gain for 60000.f shutter
//    FLICKER_FUNCTION(60000.f, 15), // means the max 18x gain for 50000.f shutter
//    FLICKER_FUNCTION(50000.f, 8), // means the max 10x gain for 40000.f shutter
//    FLICKER_FUNCTION(40000.f, 3), // means the max 4x gain for 30000.f shutter
//    FLICKER_FUNCTION(30000.f, 2), // means the max 3x gain for 20000.f shutter
//    FLICKER_FUNCTION(20000.f, 1), // means the max 2x gain for 10000.f shutter
//    FLICKER_FUNCTION(10000.f, 1),
//};
#define TABLE50HZ1 {                    \
    FLICKER_FUNCTION(70000.f, 12),      \
    FLICKER_FUNCTION(60000.f, 10),      \
    FLICKER_FUNCTION(50000.f, 8),       \
    FLICKER_FUNCTION(40000.f, 3),       \
    FLICKER_FUNCTION(30000.f, 2),       \
    FLICKER_FUNCTION(20000.f, 1),       \
    FLICKER_FUNCTION(10000.f, 1),       \
}

//UNDER_EXPOSURE
#if 0
    FLICKER_FUNCTION(70000.f, 16), // means the max 18.7x gain for 60000.f shutter
    FLICKER_FUNCTION(60000.f, 12), // means the max 14.4x gain for 50000.f shutter
    FLICKER_FUNCTION(50000.f, 6), // means the max 7.5x gain for 40000.f shutter
    FLICKER_FUNCTION(40000.f, 2.5f), // means the max 3.3x gain for 30000.f shutter
    FLICKER_FUNCTION(30000.f, 2.f), // means the max 2x gain for 20000.f shutter
    FLICKER_FUNCTION(20000.f, 1), // means the max 2x gain for 10000.f shutter
    FLICKER_FUNCTION(10000.f, 1),
#endif
#define TABLE50HZ2 {                \
    FLICKER_FUNCTION(70000.f, 18),  \
    FLICKER_FUNCTION(60000.f, 15),  \
    FLICKER_FUNCTION(50000.f, 8),   \
    FLICKER_FUNCTION(40000.f, 3),   \
    FLICKER_FUNCTION(30000.f, 2),   \
    FLICKER_FUNCTION(20000.f, 1),   \
    FLICKER_FUNCTION(10000.f, 1),   \
}

#define TABLE60HZ1 {                      \
    FLICKER_FUNCTION(66666.6667f, 6),     \
    FLICKER_FUNCTION(58333.3333f, 5),     \
    FLICKER_FUNCTION(50000.0000f, 4),     \
    FLICKER_FUNCTION(41666.6667f, 3),     \
    FLICKER_FUNCTION(41666.6667f, 1),     \
    FLICKER_FUNCTION(33333.3333f, 1),     \
    FLICKER_FUNCTION(25000.0000f, 1),     \
    FLICKER_FUNCTION(16666.6667f, 1),     \
    FLICKER_FUNCTION(8333.3333f, 1),      \
}

#define TABLE60HZ2 {                      \
    FLICKER_FUNCTION(66666.6667f, 3.f),   \
    FLICKER_FUNCTION(58333.3333f, 2.5f),  \
    FLICKER_FUNCTION(50000.0000f, 2.f),   \
    FLICKER_FUNCTION(41666.6667f, 1.5f),  \
    FLICKER_FUNCTION(41666.6667f, 1),     \
    FLICKER_FUNCTION(33333.3333f, 1),     \
    FLICKER_FUNCTION(25000.0000f, 1),     \
    FLICKER_FUNCTION(16666.6667f, 1),     \
    FLICKER_FUNCTION(8333.3333f, 1),      \
}

#define ENVIRONMENT_INFO {              \
    {70000.f, 32.f, 600.f, 30000.f, 1.f, 600.f},    \
    {30000.f, 1.f, 600.f, 20000.f, 1.f, 600.f},     \
    {20000.f, 1.f, 600.f, 1000.f, 1.f, 600.f},      \
    {70000.f, 32.f, 100.f, 70000.f, 32.f, 500.f},   \
    {1000.f, 1.f, 700.f, 1000.f, 1.f, 4900.f},      \
    {70000.f, 32.f, 100.f, 1000.f, 1.f, 4900.f}     \
}

#define DYNAMIC_COMPENSATION {          \
    1,      \
    100.f,    \
    5.f,    \
    2.f,    \
}

const ae_tuning_parameters* meizu_tuning_get_ae(void) {
    static const ae_tuning_parameters data = {
        METERING_CONFIG,
        BASE_CONFIG,
        600, // exposure balance target value. should be always equal (targetBrMin + targetBrMax)) / 2;
        20, //sizeof (CONVERGENT_TABLE_RATIO1) / sizeof (ae_table),
        CONVERGENT_TABLE_RATIO1,

        89, //sizeof (CONVERGENT_TABLE_RATIO2) / sizeof (ae_table),
        CONVERGENT_TABLE_RATIO2,

        7 * 3, //sizeof (TABLE50HZ1) / sizeof (float),
        TABLE50HZ1,
        7 * 3, //sizeof (TABLE50HZ2) / sizeof (float),
        TABLE50HZ2,

        7 * 3, //sizeof (TABLE50HZ1) / sizeof (float),
        TABLE50HZ1,
        7 * 3, //sizeof (TABLE50HZ2) / sizeof (float),
        TABLE50HZ2,

        9 * 3, //sizeof (TABLE60HZ1) / sizeof (float),
        TABLE60HZ1,
        9 * 3, //sizeof (TABLE60HZ2) / sizeof (float),
        TABLE60HZ2,

        ENVIRONMENT_INFO,
        DYNAMIC_COMPENSATION,
    };

    return &data;
}

